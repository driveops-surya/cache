name: GitHub Actions Caching Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Demo 1: Basic dependency caching
  dependency-caching:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Cache node_modules based on package-lock.json
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: npm ci

    - name: Run tests
      run: npm test

  # Demo 2: Multi-path caching
  multi-path-caching:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Cache multiple directories
    - name: Cache dependencies and build artifacts
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          dist
          .next/cache
        key: ${{ runner.os }}-multi-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-multi-

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

  # Demo 3: Conditional caching with different keys
  conditional-caching:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    # Cache with matrix-specific key
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  # Demo 4: Cache with custom actions
  custom-cache-demo:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Custom cache for pip dependencies
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Cache for downloaded data/models
    - name: Cache downloaded models
      uses: actions/cache@v3
      with:
        path: models/
        key: models-${{ hashFiles('scripts/download-models.py') }}

    - name: Download models
      run: python scripts/download-models.py

  # Demo 5: Cache performance comparison
  cache-performance-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # Measure time without cache
    - name: Install dependencies without cache (timed)
      run: |
        echo "::group::Installing without cache"
        time npm ci
        echo "::endgroup::"
      if: github.event_name == 'push'

    # Clear and test with cache
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      id: cache-perf
      with:
        path: node_modules
        key: perf-test-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - name: Install dependencies with cache (timed)
      run: |
        echo "::group::Installing with cache"
        if [ "${{ steps.cache-perf.outputs.cache-hit }}" == "true" ]; then
          echo "Cache hit! Dependencies restored from cache."
        else
          echo "Cache miss! Installing dependencies..."
          time npm ci
        fi
        echo "::endgroup::"